// Copies a BMP file

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include "bmp.h"


int main(int argc, char *argv[])
{
    // ensure proper usage
    if (argc != 4)
    {
        fprintf(stderr, "Usage: copy infile outfile\n");
        return 1;
    }

    // remember filenames
    for (int i = 0, m=strlen(argv[1]);  i < m; i++) // I'm checking for correct digit numbers
    {
        if (isdigit(argv[1][i]) == 0)
        {
            printf("The first parameter must be a positive number between 1 and 100!\n");
            return 1;  //printf("It's a trap!\n");
        }
    }

    int n = atoi (argv[1]);  //  this is how many times we will resise our file

    if (n > 100 || n < 1) // because of condition the first must be a positive integer less than or equal to 100
    {
        printf("The first parameter must be a positive number between 1 and 100!\n");
        return 1;
    }

    int checking_for_bmp = strlen (argv[2]) - 1; // we need to be sure that user want to convert bmp file
    if (argv[2][checking_for_bmp]!='p')
    {
        printf("We can convert only bmp file!\n");
        return 1;
    }
    else checking_for_bmp--;
    if (argv[2][checking_for_bmp]!='m')
    {
        printf("We can convert only bmp file!\n");
        return 1;
    }
    else checking_for_bmp--;
    if (argv[2][checking_for_bmp]!='b')
    {
        printf("We can convert only bmp file!\n");
        return 1;
    }
    else checking_for_bmp--;
    if (argv[2][checking_for_bmp]!='.')
    {
        printf("We can convert only bmp file!\n");
        return 1;
    }
    else checking_for_bmp = strlen (argv[3])-1; //because we need to check the next number

    if (argv[3][checking_for_bmp]!='p')
    {
        printf("We can convert only bmp file!\n");
        return 1;
    }
    else checking_for_bmp--;
    if (argv[3][checking_for_bmp]!='m')
    {
        printf("We can convert only bmp file!\n");
        return 1;
    }
    else checking_for_bmp--;
    if (argv[3][checking_for_bmp]!='b')
    {
        printf("We can convert only bmp file!\n");
        return 1;
    }
    else checking_for_bmp--;
    if (argv[3][checking_for_bmp]!='.')
    {
        printf("We can convert only bmp file!\n");
        return 1;
    }



    char *infile = argv[2];
    char *outfile = argv[3];

    // open input file
    FILE *inptr = fopen(infile, "r");
    if (inptr == NULL)
    {
        fprintf(stderr, "Could not open %s.\n", infile);
        return 2;
    }

    // open output file
    FILE *outptr = fopen(outfile, "w");
    if (outptr == NULL)
    {
        fclose(inptr);
        fprintf(stderr, "Could not create %s.\n", outfile);
        return 3;
    }

    // read infile's BITMAPFILEHEADER
    BITMAPFILEHEADER bf;
    fread(&bf, sizeof(BITMAPFILEHEADER), 1, inptr);

    // read infile's BITMAPINFOHEADER
    BITMAPINFOHEADER bi;
    fread(&bi, sizeof(BITMAPINFOHEADER), 1, inptr);

    // ensure infile is (likely) a 24-bit uncompressed BMP 4.0
    if (bf.bfType != 0x4d42 || bf.bfOffBits != 54 || bi.biSize != 40 ||
        bi.biBitCount != 24 || bi.biCompression != 0)
    {
        fclose(outptr);
        fclose(inptr);
        fprintf(stderr, "Unsupported file format.\n");
        return 4;
    }


    // determine padding for scanlines
    int padding = (4 - (bi.biWidth * sizeof(RGBTRIPLE)) % 4) % 4;

    //new values of header

    int oldWidth = bi.biWidth;
    int oldHeight = abs(bi.biHeight);
    bi.biWidth = n * bi.biWidth;
    bi.biHeight = n * bi.biHeight;
    int newPadding = (4 - (bi.biWidth * sizeof(RGBTRIPLE)) % 4) % 4;
    bi.biSizeImage = ((sizeof(RGBTRIPLE) * bi.biWidth) + newPadding) * abs(bi.biHeight);
    bf.bfSize = bi.biSizeImage + sizeof(BITMAPINFOHEADER) + sizeof(BITMAPFILEHEADER);

    // write outfile's BITMAPFILEHEADER
    fwrite(&bf, sizeof(BITMAPFILEHEADER), 1, outptr);

    // write outfile's BITMAPINFOHEADER
    fwrite(&bi, sizeof(BITMAPINFOHEADER), 1, outptr);

    RGBTRIPLE scanline[bi.biWidth * sizeof(RGBTRIPLE)];

    // iterate over infile's scanlines
    for (int i = 0; i < oldHeight; i++)
    {


         for (int vert_counter = 0; vert_counter < n; vert_counter++)
         {
             // iterate over pixels in scanline
             for (int j = 0; j < oldWidth; j++)
             {
                 // temporary storage
                 RGBTRIPLE triple;

                 // read RGB triple from infile
                 fread(&triple, sizeof(RGBTRIPLE), 1, inptr);
                 for (int counter = 0; counter < n; counter++)
                 {
                     // write RGB triple to outfile
                     fwrite(&triple, sizeof(RGBTRIPLE), 1, outptr);
                 }
             }

             // then add it back (to demonstrate how)
             for (int k = 0; k < newPadding; k++)
             {
                 fputc(0x00, outptr);
             }


             // Return to the beginning of a scanline
             if (vert_counter < n - 1)
             {
             fseek(inptr, -oldWidth * sizeof(RGBTRIPLE), SEEK_CUR);
             }
         }

          // skip over padding, if any
          fseek(inptr, padding, SEEK_CUR);
    }

    // close infile
    fclose(inptr);

    // close outfile
    fclose(outptr);

    // success
    return 0;
}
