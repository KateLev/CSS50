import os

from cs50 import SQL
from flask import Flask, flash, jsonify, redirect, render_template, request, session
from flask_session import Session
from tempfile import mkdtemp
from werkzeug.exceptions import default_exceptions, HTTPException, InternalServerError
from werkzeug.security import check_password_hash, generate_password_hash

from helpers import apology, login_required, lookup, usd

# Configure application
app = Flask(__name__)

# Ensure templates are auto-reloaded
app.config["TEMPLATES_AUTO_RELOAD"] = True

# Ensure responses aren't cached
@app.after_request
def after_request(response):
    response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
    response.headers["Expires"] = 0
    response.headers["Pragma"] = "no-cache"
    return response

# Custom filter
app.jinja_env.filters["usd"] = usd

# Configure session to use filesystem (instead of signed cookies)
app.config["SESSION_FILE_DIR"] = mkdtemp()
app.config["SESSION_PERMANENT"] = False
app.config["SESSION_TYPE"] = "filesystem"
Session(app)

# Configure CS50 Library to use SQLite database
db = SQL("sqlite:///finance.db")

# Make sure API key is set
if not os.environ.get("API_KEY"):
    raise RuntimeError("API_KEY not set")


@app.route("/")
@login_required
def index():
    """Show portfolio of stocks"""
    users_data = db.execute("SELECT * FROM users WHERE id = :id", id = session ["user_id"])
    quote_data = db.execute("SELECT * FROM usersQuote WHERE user_id = :id", id = session ["user_id"])


    select_quote_data = db.execute("SELECT * FROM usersQuote WHERE user_id = :id", id = session ["user_id"])

#    count = 0


#    Shares_data = []

 #   j = 0
#    while j < len(quote_data):
#        Shares_data.append(quote_data[j]["Shares"])
#            count = count + int(quote_data[j]["Shares"])
 #       j = j + 1

#    print(Shares_data)
#   print(count)



    return render_template("index.html", quote_data = quote_data , cash = users_data[0]["cash"], Symbol = quote_data[0]["Symbol"] )


@app.route("/buy", methods=["GET", "POST"])
@login_required
def buy():
    if request.method == "POST":   # if user put something in form
        quote_to_buy = lookup(request.form.get("symbol"))  # check if we have suck quote
        if not quote_to_buy:
            return apology("Sorry, we didn't find this quote")

        quote_number_to_buy = request.form.get("number_to_buy")  # check if number is correct
        if not quote_number_to_buy:
            return apology("We don't understand how much you want to buy")

        rows = db.execute("SELECT * FROM users WHERE id = :id", id = session["user_id"]) # use our users table to select information about user

        Total_Cash = rows[0]["cash"]
        cost = float(quote_number_to_buy) * quote_to_buy['price']
        Total_Cash = Total_Cash - cost

        if Total_Cash < 0:
            return apology("Not enought minerals :(")


        result = db.execute("INSERT INTO usersQuote (user_id, Symbol, name, shares, price, total_Cash) VALUES (:user_id, :Symbol, :name, :shares, :price, :total_Cash)",
        user_id = rows[0]["id"], Symbol = quote_to_buy['symbol'], name=quote_to_buy['name'], shares = quote_number_to_buy, price=quote_to_buy['price'], total_Cash = Total_Cash)

        if not result:
            return apology("Cannot insert into db")

        db.execute("UPDATE users SET cash = :Total_Cash WHERE id = :id", Total_Cash = Total_Cash, id = session["user_id"])

        return render_template("Buyed.html", name=quote_to_buy['name'], Symbol = quote_to_buy['symbol'], price=quote_to_buy['price'], user_id=rows[0]["id"], Shares = quote_number_to_buy, cost=cost, Total_Cash=Total_Cash, user_name=rows[0]['username'])

    else:
        return render_template("Buy.html")



@app.route("/check", methods=["GET"])
def check():
    """Return true if username available, else false, in JSON format"""
    return jsonify("TODO")


@app.route("/history")
@login_required
def history():
    """Show history of transactions"""
    return apology("TODO")


@app.route("/login", methods=["GET", "POST"])
def login():
    """Log user in"""

    # Forget any user_id
    session.clear()

    # User reached route via POST (as by submitting a form via POST)
    if request.method == "POST":

        # Ensure username was submitted
        if not request.form.get("username"):
            return apology("must provide username", 403)

        # Ensure password was submitted
        elif not request.form.get("password"):
            return apology("must provide password", 403)

        # Query database for username
        rows = db.execute("SELECT * FROM users WHERE username = :username",
                          username=request.form.get("username"))

        # Ensure username exists and password is correct
        if len(rows) != 1 or not check_password_hash(rows[0]["hash"], request.form.get("password")):
            return apology("invalid username and/or password", 403)

        # Remember which user has logged in
        session["user_id"] = rows[0]["id"]

        # Redirect user to home page
        return redirect("/")

    # User reached route via GET (as by clicking a link or via redirect)
    else:
        return render_template("login.html")


@app.route("/logout")
def logout():
    """Log user out"""

    # Forget any user_id
    session.clear()

    # Redirect user to login form
    return redirect("/")


@app.route("/quote", methods=["GET", "POST"])
@login_required
def quote():

    """Get stock quote."""

    if request.method == "POST":
        quote = lookup(request.form.get("symbol"))
        if not quote:
            return apology("Sorry, we didn't find this quote")
        return render_template("quoted.html", name=quote['name'], symbol=quote['symbol'], price=quote['price'])

    else:
        return render_template("quote.html")




@app.route("/register", methods=["GET", "POST"])
def register():
     # Forget any user_id
    session.clear()

    # User reached route via POST (as by submitting a form via POST)
    if request.method == "POST":

        # Ensure username was submitted
        if not request.form.get("username"):
            return apology("must provide username", 403)

        # Ensure password was submitted
        elif not request.form.get("password"):
            return apology("must provide password", 403)

        elif not request.form.get("confirmation"):
            return apology("you must confirm the password", 403)

        elif request.form.get("confirmation") != request.form.get("password"):
            return apology("You must confirm your password properly :(", 403)

        password_hash = generate_password_hash(request.form.get("password"))

        #to register new user
        result = db.execute("INSERT INTO users (username, hash) VALUES (:username, :hash)", username = request.form.get("username"), hash =  password_hash)

        if not result:
            return apology("The name is already exist", 403)

        #to select the new id and start a new session

        rows = db.execute("SELECT * FROM users WHERE username = :username",
                          username=request.form.get("username"))

        # Remember which user has logged in
        session["user_id"] = rows[0]["id"]

        # Redirect user to home page
        return redirect("/")

    # User reached route via GET (as by clicking a link or via redirect)
    else:
        return render_template("register.html")


@app.route("/sell", methods=["GET", "POST"])
@login_required
def sell():
    """Sell shares of stock"""
    return apology("TODO")


def errorhandler(e):
    """Handle error"""
    if not isinstance(e, HTTPException):
        e = InternalServerError()
    return apology(e.name, e.code)


# Listen for errors
for code in default_exceptions:
    app.errorhandler(code)(errorhandler)
